Given the task specifications,imitate a talk between an developer and coding worker and generata an action item for the task
coding worker write an action list using GitHub Markdown syntax. Begin with a YAML description for each item, use the template below , to extract action items no less then 5 from conversation, Do put code snippet into action item if there is any.
- actions item , and the description of the action item(if any code snippet provide here, put whole into here), files to change, do refer to test specs from given specs details

Developer: As the plan maker,  explain the specs and generating a development plan. You should also answer any questions they may have to ensure they have a clear understanding of the project, escpecailly the Test specs.

Coding Worker: As the coding worker, your role is to generate files and write valid code for each file. Please provide a brief description of the code structure, including variables, data schemas for the entry point, message names, and function names. It would be helpful if you could provide code examples in your response for better review and discussion. If you have any questions or parts that are unclear, please raise them. you do NOT write test code youself, the test code provieded in specs.


if no questions from both side. respond with "no more questions" in the exact words



##############################


Task Specs: Create a three_sum function in a file called sample_code.py. Given an array of integers, return indices of the three numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 20, Because nums[0] + nums[1] + nums[2] = 2 + 7 + 11 = 20, return [0, 1, 2].

Developer: Alright, let's start by creating a file called sample_code.py. In this file, we'll define a function called three_sum that takes in an array of integers and a target number. The function should return the indices of three numbers in the array that add up to the target.

Coding Worker: Understood. So, the function should take two parameters: an array of integers and a target number. And it should return a list of indices. Is that correct?

Developer: Yes, that's correct. The function should take in the array of integers and the target number as parameters, and it should return a list of indices.

Coding Worker: Alright. So, to find the indices of the three numbers that add up to the target, should we consider all possible combinations of three numbers in the array?

Developer: Yes, we should consider all possible combinations of three numbers in the array. However, we need to make sure that we don't use the same element twice.

Coding Worker: Understood. So, we need to iterate through the array and check all possible combinations of three numbers. If we find a combination that adds up to the target, we should return the indices of those three numbers. If no such combination is found, we should return an empty list. Is that correct?

Developer: Yes, that's correct. We should iterate through the array and check all possible combinations of three numbers. If we find a combination that adds up to the target, we should return the indices of those three numbers. If no such combination is found, we should return an empty list.

Coding Worker: Alright. I think I have a clear understanding of the task. I will now proceed to write the code for the three_sum function in the sample_code.py file.

Developer: Great! Let me know if you have any questions or need any further clarification.

Coding Worker: No more questions. I will start working on the code now.

Developer: Perfect. Let's proceed then.

[Action Item]

```yaml
- [Write code for three_sum function in sample_code.py, sample_code.py]
- [Test the function with different inputs and verify the output, sample_code.py]
- [Make sure the function returns the correct indices of three numbers that add up to the target, sample_code.py]
- [Handle the case where no combination of three numbers adds up to the target, sample_code.py]
- [Ensure that the function does not use the same element twice, sample_code.py]
```



take the previous msg and extract actionable items list including sub points for each item and make each item with its subpoints into one line with no linebreak(only line break between items) and remove the heading "Action Item" ,and also, if the code provide in previous msg, extract them as one of the items. make sure that you put the entire content as an item even though you will likely copy and paste the most of the previous messsage 
here is the previouse messages 
Task Specs: Create a three_sum function in a file called sample_code.py. Given an array of integers, return indices of the three numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 20, Because nums[0] + nums[1] + nums[2] = 2 + 7 + 11 = 20, return [0, 1, 2].

Developer: Alright, let's start by creating a file called sample_code.py. In this file, we'll define a function called three_sum that takes in an array of integers and a target number. The function should return the indices of three numbers in the array that add up to the target.

Coding Worker: Understood. So, the function should take two parameters: an array of integers and a target number. And it should return a list of indices. Is that correct?

Developer: Yes, that's correct. The function should take in the array of integers and the target number as parameters, and it should return a list of indices.

Coding Worker: Alright. So, to find the indices of the three numbers that add up to the target, should we consider all possible combinations of three numbers in the array?

Developer: Yes, we should consider all possible combinations of three numbers in the array. However, we need to make sure that we don't use the same element twice.

Coding Worker: Understood. So, we need to iterate through the array and check all possible combinations of three numbers. If we find a combination that adds up to the target, we should return the indices of those three numbers. If no such combination is found, we should return an empty list. Is that correct?

Developer: Yes, that's correct. We should iterate through the array and check all possible combinations of three numbers. If we find a combination that adds up to the target, we should return the indices of those three numbers. If no such combination is found, we should return an empty list.

Coding Worker: Alright. I think I have a clear understanding of the task. I will now proceed to write the code for the three_sum function in the sample_code.py file.

Developer: Great! Let me know if you have any questions or need any further clarification.

Coding Worker: No more questions. I will start working on the code now.

Developer: Perfect. Let's proceed then.

[Action Item]

```yaml
- [Write code for three_sum function in sample_code.py, sample_code.py]
- [Test the function with different inputs and verify the output, sample_code.py]
- [Make sure the function returns the correct indices of three numbers that add up to the target, sample_code.py]
- [Handle the case where no combination of three numbers adds up to the target, sample_code.py]
- [Ensure that the function does not use the same element twice, sample_code.py]
```


Write code for three_sum function in sample_code.py
Test the function with different inputs and verify the output
Make sure the function returns the correct indices of three numbers that add up to the target
Handle the case where no combination of three numbers adds up to the target
Ensure that the function does not use the same element twice"assistant:File `sample_code.py` saved to the disk and currently looks like this:\n```\ndef three_sum(nums, target):\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []\n\n```"
"assistant:File `sample_code.py` saved to the disk and currently looks like this:\n```\ndef three_sum(nums, target):\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []\n\n```"
"assistant:File `sample_code.py` saved to the disk and currently looks like this:\n```\ndef three_sum(nums, target):\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []\n\n```"
"assistant:File `sample_code.py` saved to the disk and currently looks like this:\n```\ndef three_sum(nums, target):\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []\n\n\n# Handle the case where no combination of three numbers adds up to the target\n\n# If no combination of three numbers adds up to the target, return None\n\n\n```"
"assistant:File `sample_code.py` saved to the disk and currently looks like this:\n```\ndef three_sum(nums, target):\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []\n\n# Handle the case where no combination of three numbers adds up to the target\n\n# If no combination of three numbers adds up to the target, return None\n```"
