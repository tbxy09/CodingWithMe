imitate a talk between an developer responsible for generating a development plan and coding worker who has access for the following tools and create the action items for the plan 
bash_shell: A tool to run shell commands on this Linux machine. It returns output as a real command line interface. 
CodeMonkey: CodeMonkey is a developer agent that can implement code changes according to the development plan
 
talks including the structures of project, detailing all shared dependencies like variable names, data schemas, function names, etc. that will be consistent across the generated files. and will be like this:
Task: task description 
Developer: you are plan maker. you job is to create a plan for executor to follow and answer the questions if has any to make sure the executor has no unclear parts and also extract all the info. reference the details from task specs
Coding Worker: use tools bash_shell, CodeMonkey generate files and valid code for each file. breifly describe the structure for the code,including but not limmited to
what variables they export,data schemas, message names,function names. 
Reference to the plan from above, Cannot include code fence markdown in the response;raise quesitons for unclear parts;
... 
(this Developer/Coding worker/Questions can repeat N times)
Final Answer: if no questions from both side. respond "no more questions". coding worker write a action list using GitHub Markdown syntax. Begin with a YAML description for each item.
Developer: no more questions 
lets Begin! 
##############################
Task:Build a Tic-Tac-Toe game using a python CLI. Here are the specifications.

The Grid: The game board is a 3x3 grid, consisting of 3 rows and 3 columns, creating a total of 9 squares.

Players: There are two players. One player uses the number "1", and the other player uses the number "2".

Taking Turns: Players take turns to put their respective numbers ("1" or "2") in an empty square of the grid. Once a player has placed their number in a square, it cannot be changed or removed.

Objective: The goal is to get three of your numbers in a row, either horizontally, vertically, or diagonally.

End of the Game: The game concludes in one of two ways: One player gets three of their numbers in a row (horizontally, vertically, or diagonally) and is declared the winner.
All squares on the grid are filled, and no player has three in a row. This situation is a "draw" or a "tie".

Technical specifications:
Build a file called tic_tac_toe.py. This file will be called through command lines. You will have to prompt users for their move. Player 1 will always start.
Players will input their move in the following format: "x,y" where x and y represent the location in the grid (0,0 is top left, 2,2 is bottom right).

Your primary requirement is to halt the game when appropriate and to print only one of these three exact sentences:

"Player 1 won!"
"Player 2 won!"
"Draw"

Edge cases: A player can send an incorrect location. Either the location is incorrect or the square is already filled. In this case, this counts as doing nothing, and the player gets prompted for new locations again.


You will be expected to create a python file called tic_tac_toe.py that will run through command lines by using ```python tic_tac_toe.py```.

Here is an example of how your tic_tac_toe.py game will be tested.
```
process = subprocess.Popen(
    ['python', 'tic_tac_toe.py'],
    stdout=subprocess.PIPE,
    text=True
)

output, _ = process.communicate('\n'.join(["0,0", "1,0", "0,1", "1,1", "0,2"]))

assert "Player 1 won!" in output
```
Developer: Alright, let's begin. Our task is to build a Tic-Tac-Toe game using a Python CLI. The game board is a 3x3 grid, consisting of 3 rows and 3 columns. There are two players, one using the number "1" and the other using the number "2". Players take turns to place their respective numbers in an empty square of the grid. The objective is to get three of your numbers in a row, either horizontally, vertically, or diagonally. The game ends when one player gets three in a row or when all squares on the grid are filled without a winner, resulting in a draw.

Coding Worker: Understood. I will create a file called tic_tac_toe.py that will be called through command lines. I will prompt users for their moves, and Player 1 will always start. The players will input their moves in the format "x,y" where x and y represent the location in the grid. I will handle edge cases where a player sends an incorrect location or tries to fill an already filled square.

Developer: Great. Please ensure that the tic_tac_toe.py file is executable through the command `python tic_tac_toe.py`. Also, make sure to print only one of the following three sentences when appropriate: "Player 1 won!", "Player 2 won!", or "Draw".

Coding Worker: Understood. I will handle the game logic and print the appropriate sentence based on the outcome. I will also make sure to handle incorrect locations and already filled squares.

Developer: Perfect. Please go ahead and implement the code. Let me know if you have any questions or if anything is unclear.

Coding Worker: I have a question. Should I handle any specific error messages for incorrect locations or already filled squares?

Developer: Good question. For incorrect locations, you can simply ignore the input and prompt the player for a new location. For already filled squares, you can also ignore the input and prompt the player for a new location. In both cases, no error message needs to be displayed.

Coding Worker: Understood. I will handle incorrect locations and already filled squares by ignoring the input and prompting the player for a new location. I will not display any error messages.

Developer: That sounds good. Please proceed with the implementation.

Coding Worker: I have completed the implementation of the tic_tac_toe.py file. It handles the game logic, prompts the players for their moves, and prints the appropriate outcome. It also handles incorrect locations and already filled squares by ignoring the input and prompting for a new location.

Developer: Great job! Now, let's create the action items for the development plan.

Action Items:
- Create a file called tic_tac_toe.py.
- Implement the game logic to handle player moves and determine the outcome.
- Prompt the players for their moves in the format "x,y".
- Print the appropriate outcome when the game ends: "Player 1 won!", "Player 2 won!", or "Draw".
- Handle incorrect locations by ignoring the input and prompting for a new location.
- Handle already filled squares by ignoring the input and prompting for a new location.
- Ensure the tic_tac_toe.py file is executable through the command `python tic_tac_toe.py`.

Developer: Do you have any more questions?

Coding Worker: 
